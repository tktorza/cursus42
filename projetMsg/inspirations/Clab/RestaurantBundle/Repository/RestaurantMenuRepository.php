<?php

namespace Clab\RestaurantBundle\Repository;

use Clab\RestaurantBundle\Entity\RestaurantMenu;

/**
 * RestaurantMenuRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RestaurantMenuRepository extends \Doctrine\ORM\EntityRepository
{
    public function getByTypeForRestaurant($restaurant, $type)
    {
        $qb = $this->createQueryBuilder('menu')
            ->where('menu.restaurant = :restaurant')
            ->andWhere('menu.type = :type')
            ->setParameter('restaurant', $restaurant)
            ->setParameter('type', $type)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getDefaultMenuForRestaurant($restaurant)
    {
        $qb = $this->createQueryBuilder('menu')
            ->where('menu.restaurant = :restaurant')
            ->andWhere('menu.type = :type')
            ->setParameter('restaurant', $restaurant)
            ->setParameter('type', RestaurantMenu::RESTAURANT_MENU_TYPE_DEFAULT)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getDeliveryMenuForRestaurant($restaurant)
    {
        $qb = $this->createQueryBuilder('menu')
            ->where('menu.restaurant = :restaurant')
            ->andWhere('menu.type = :type')
            ->setParameter('restaurant', $restaurant)
            ->setParameter('type', RestaurantMenu::RESTAURANT_MENU_TYPE_DELIVERY)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getDeliveryMenuForChainStore($chainstore)
    {
        $qb = $this->createQueryBuilder('menu')
            ->where('menu.chainStore = :chainstore')
            ->andWhere('menu.type = :type')
            ->setParameter('chainstore', $chainstore)
            ->setParameter('type', RestaurantMenu::RESTAURANT_MENU_TYPE_DELIVERY)
        ;
        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getDefaultMenuForChainStore($chainstore)
    {
        $qb = $this->createQueryBuilder('menu')
            ->where('menu.chainStore = :chainstore')
            ->andWhere('menu.type = :type')
            ->setParameter('chainstore', $chainstore)
            ->setParameter('type', RestaurantMenu::RESTAURANT_MENU_TYPE_DEFAULT)
        ;
        return $qb->getQuery()->getOneOrNullResult();
    }
}
