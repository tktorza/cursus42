{% extends 'ClabBoardBundle:Base:base.html.twig' %}

{% block subnav %}
    {% if context == 'restaurant' %}
        {% include 'ClabBoardBundle:Base:subnav.html.twig' with {
        category: 'store',
        route: 'board_delivery',
        } %}
    {% else %}
        {% include 'ClabBoardBundle:Base:subnav.html.twig' with {
        category: 'admin',
        route: 'board_delivery',
        } %}
    {% endif %}
{% endblock %}

{% block body %}
    <div class="container padding-v-10" id="delivery">
        <ul class="nav nav-pills">
            {% if context =='restaurant' %}
            <li><a href="{{ path('board_delivery', { context:context, contextPk: contextPk }) }}">Horaires</a></li>
            <li class="active"><a href="{{ path('board_delivery_zones', { context:context, contextPk: contextPk }) }}">Mes zones</a></li>
            {% endif %}
        </ul>
        <br>
        <section class="panel">
            <div class="panel-body">
                <div class="row row-eq-height">
                    <div class="col-md-12 well" id="map" style="height:500px;"></div>
                    <h5 class="col-md-12"><i class="fa fa-info"></i> Pour supprimer un point de la zone effectuez un click droit sur celui ci.</h5>
                    {% if context == 'restaurant' %}
                        <div class="col-md-12">
                            <button id="addZone" class="btn btn-primary">Ajouter une zone</button>
                            <button id="editZone" class="btn btn-primary"  {% if areaDeliveries|length <=0 %}style="display:none;"{% endif %}>Editer une zone</button>
                            <br>
                            <br>
                            <div class="addZone">
                                <form method="post">
                                    <div class="editZone" hidden>
                                        <label for="edit-zone">Editer la zone:</label>
                                        <select id="edit-zone" class="form-control">
                                            {% if areaDeliveries|length >0 %}
                                                {% for areaDelivery in areaDeliveries %}
                                                    <option value="{{ areaDelivery.slug }}">{{ areaDelivery.zone }}</option>
                                                {% endfor %}
                                            {% endif %}
                                        </select>
                                        </br>
                                    </div>
                                    <div class="row row-eq-height">
                                        <div class="col-md-3 form-group">
                                            <div class="big-label" style="height:100px;">
                                                {{ form_row(form.isOnline, { attr: { class: 'icheck' }, id:"zone-online" }) }}
                                            </div>
                                        </div>
                                        <div class="col-md-3 form-group">
                                            <div class="big-label" style="height:100px;">
                                                {{ form_row(form.color, { attr: { class: 'form-control input-lg minicolors' }, id:"zone-color" }) }}
                                            </div>
                                        </div>
                                        <div class="col-md-6 form-group">
                                            <div class="big-label">
                                                {{ form_row(form.zone, { attr: { class: 'form-control  input-lg' }, id:"zone-value" }) }}
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row row-eq-height">
                                        <div class="col-md-3 form-group">
                                            <div class="big-label">
                                                {{ form_row(form.price, { attr: { class: 'form-control  input-lg' }, id:"zone-price" }) }}
                                            </div>
                                        </div>
                                        <div class="col-md-3 form-group">
                                            <div class="big-label">
                                                {{ form_row(form.minPanier, { attr: { class: 'form-control  input-lg' }, id:"zone-price-min" }) }}
                                            </div>
                                        </div>
                                        <div class="col-md-6 form-group">
                                            <div class="big-label">
                                                {{ form_row(form.slotLength, { attr: { class: 'form-control' }, id:"zone-slot-length" }) }}
                                            </div>
                                        </div>
                                    </div>
                                    <br>
                                    <div class="row">
                                        <div class="col-xs-8"></div>
                                        <div class="col-xs-4">
                                            <button class="submit btn btn-primary">Valider</button>
                                            <button class="edit-submit btn btn-primary" style="display:none;">Editer</button>
                                            <button class="btn btn-danger delete-zone editZone" style="display:none;">Supprimer</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </section>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript">
        $(document).ready(function(){

            $('#zone-color').minicolors('value',"#000000");

            {% if context =='restaurant' %}
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: {{ lat }}, lng: {{ lng}} },
                scrollwheel: true,
                zoom: 14
            });
            var marker = new google.maps.Marker({
                map: map,
                position: {lat: {{ lat }}, lng: {{ lng}} },
                title: "{{ restaurant.name }}"
            });

            var polygons = [];
            var areaDeliveries = [];
            var infowindow = [];

            {% if areaDeliveries|length >0 %}
                {% for areaDelivery in areaDeliveries %}
                    areaDeliveries["{{ areaDelivery.slug }}"] = {
                        'color' : "{{ areaDelivery.color }}",
                        'zone'  : "{{ areaDelivery.zone }}",
                        'price' : {{ areaDelivery.price }},
                        'minPanier' : {{ areaDelivery.minPanier }},
                        'slotLength' : {{ areaDelivery.slotLength }},
                        'isOnline' : {% if areaDelivery.isOnline %}true{% else %}false{% endif %}
                    };
                    var polyCoords = [];
                    {% for points in areaDelivery.points %}
                    polyCoords.push({lat: {{ points[0] }} , lng: {{ points[1] }} });
                    {% endfor %}
                    polygons["{{ areaDelivery.slug }}"] = new google.maps.Polygon({
                        paths: polyCoords,
                        strokeColor: "{{ areaDelivery.color }}",
                        strokeOpacity: 1.,
                        strokeWeight: 3,
                        fillColor: "{{ areaDelivery.color }}",
                        fillOpacity: 0.15
                    });
                    polygons[ "{{ areaDelivery.slug }}" ].setMap(map);

                    infowindow[ "{{ areaDelivery.slug }}"] = new google.maps.InfoWindow({
                        content: '<h4>Restaurant: {{ areaDelivery.restaurant.name }}</h4><br>'+
                        'nom de la zone: {{ areaDelivery.zone }}<br>'+
                        'coût de la livraison: {{ areaDelivery.price|number_format(2,'.',',') }} &euro;<br>'+
                        'prix minimum panier: {{ areaDelivery.minPanier|number_format(2,'.',',') }} &euro;<br>'+
                        'temps de livraison estimé: {{ areaDelivery.slotLength }} minutes<br>'
                    });

                    polygons[ "{{ areaDelivery.slug }}"].addListener('click', function() {
                        for(var key in infowindow)
                            infowindow[key].close();

                        infowindow[ "{{ areaDelivery.slug }}"].setPosition( new google.maps.LatLng({{ areaDelivery.centerLat }} , {{ areaDelivery.centerLng }} ));
                        infowindow[ "{{ areaDelivery.slug }}"].open(map);
                    });


                {% endfor %}
            {% endif %}

            if(!polyCoords){
                var polyCoords = [
                    {lat: {{ lat - 0.0045 }}, lng: {{ lng - 0.0045 }}},
                    {lat: {{ lat + 0.0045 }}, lng: {{ lng - 0.0045 }} },
                    {lat: {{ lat + 0.0045 }}, lng: {{ lng + 0.0045 }} },
                    {lat: {{ lat - 0.0045 }}, lng: {{ lng + 0.0045 }} }
                ];
            }


            // Construct the polygon.
            var polygon = new google.maps.Polygon({
                paths: polyCoords,
                strokeColor: '#000000',
                strokeOpacity: 1.,
                strokeWeight: 3,
                fillColor: '#000000',
                fillOpacity: 0.,
                editable: true
            });

            polygon.addListener('rightclick', function(event){
                if(event.path != null && event.vertex != null){
                    var path = this.getPaths().getAt(event.path);
                    if(path.getLength() > 3){
                        path.removeAt(event.vertex);
                    }
                }
            });

            polygon.setMap(map);

            $('#addZone').click(function(){
                $('.editZone').hide('slow');
                for( var poly in polygons){
                    polygons[poly].setEditable(false);
                }
                polygon.setMap(map);
                polygon.setEditable(true);
                $('#zone-value').val('');
                $('#zone-color').val('');
                $('#zone-color').minicolors('value','#000000');
                $('#zone-price').val('');
                $('#zone-slot-length').find('option').removeClass('selected');
                $('#zone-slot-length').find('option:eq(0)').addClass('selected');
                $('#zone-price-min').val('');
                $('#zone-online').prop('checked',true);
                $('button.edit-submit').hide('slow');
                $('button.submit').show('slow');
            });

            $('#editZone').click(function(){
                $('.editZone').toggle();
                var slug = $("#edit-zone").find('option:selected').val();
                polygons[slug].setEditable(true);
                polygon.setMap(null);
                polygon.setEditable(false);
                $('#zone-value').val(areaDeliveries[slug].zone);
                $('#zone-color').val(areaDeliveries[slug].color);
                $('#zone-color').minicolors('value',areaDeliveries[slug].color);
                $('#zone-price').val(areaDeliveries[slug].price);
                $('#zone-slot-length').find('option').removeClass('selected');
                $('#zone-slot-length').find('option[value="'+areaDeliveries[slug].slotLength+'"]').attr("selected", "selected");
                $('#zone-price-min').val(areaDeliveries[slug].minPanier);

                $('#zone-online').prop('checked',areaDeliveries[slug].isOnline);
                if(areaDeliveries[slug].isOnline){
                    $('#zone-online').parent().addClass('checked');
                }else{
                    $('#zone-online').parent().removeClass('checked');
                }
                $('button.submit').hide('slow');
                $('button.edit-submit').show('slow');
            });
            $('#edit-zone').change(function(){
                var slug = $(this).find('option:selected').val();

                for( var poly in polygons){
                    polygons[poly].setEditable(false);
                }
                polygons[slug].setEditable(true);

                $('#zone-value').val(areaDeliveries[slug].zone);
                $('#zone-color').val(areaDeliveries[slug].color);
                $('#zone-color').minicolors('value',areaDeliveries[slug].color);
                $('#zone-price').val(areaDeliveries[slug].price);
                $('#zone-slot-length').find('option').removeClass('selected');
                $('#zone-slot-length').find('option[value="'+areaDeliveries[slug].slotLength+'"]').attr("selected", "selected");
                $('#zone-price-min').val(areaDeliveries[slug].minPanier);

                $('#zone-online').prop('checked',areaDeliveries[slug].isOnline);
                if(areaDeliveries[slug].isOnline){
                    $('#zone-online').parent().addClass('checked');
                }else{
                    $('#zone-online').parent().removeClass('checked');
                }
            });

            $('.minicolors').change(function(){
                if($(this).val() != ""){
                    if(polygon.get('editable')){
                        polygon.setOptions({fillColor:$(this).val(),strokeColor:$(this).val()});
                    }else{
                        for(var id in polygons){
                            if(polygons[id].get('editable')){
                                polygons[id].setOptions({fillColor:$(this).val(),strokeColor:$(this).val()});
                                break;
                            }
                        }
                    }
                }
            });

            $('button.submit').click(function(e){
                e.preventDefault();
                var price = $('#zone-price').val().replace(',','.'),
                        priceMin = $('#zone-price-min').val().replace(',','.');
                if( isNaN(price) || isNaN(priceMin) ){
                    sweetAlert('Oops...', 'Erreur format prix', 'error');
                }else if($('#zone-value').val()!='' && $('#zone-color').val() != '' ){
                    if($('#zone-price').val() == '')
                        price = "0";
                    if($('#zone-price-min').val() == '')
                        priceMin = "0";

                    var points = [],
                            vertices = polygon.getPath(),
                            zoneValue = $('#zone-value').val(),
                            color = $('#zone-color').val(),
                            slotLength = $('#zone-slot-length').find(':selected').val(),
                            isOnline = $('#zone-online').is(':checked');

                    var centroid = [0.0,0.0];

                    for (var i =0; i < vertices.getLength(); i++) {
                        var xy = vertices.getAt(i);
                        points.push([xy.lat(),xy.lng()]);
                        centroid[0] += xy.lat();
                        centroid[1] += xy.lng();
                    }
                    centroid[0] = centroid[0] / vertices.getLength();
                    centroid[1] = centroid[1] / vertices.getLength();

                    $.ajax({
                                url: "{{ path('board_delivery_zones_add', { context:context, contextPk: contextPk }) }}",
                                method: "post",
                                data: {
                                    "slug" : "{{ restaurant.slug }}",
                                    "zone-value" : zoneValue,
                                    "zone-color" : color,
                                    "zone-price" : parseFloat(price),
                                    "zone-price-min" : parseFloat(priceMin),
                                    "zone-slot-length" : slotLength,
                                    "is-online" : isOnline,
                                    "points": points,
                                    "centerLat": centroid[0],
                                    "centerLng": centroid[1]
                                },
                                beforeSend: function( xhr ) {

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(thrownError);
                                }
                            })
                            .done(function( data ) {
                                var polygonC = [],d=data['points'];
                                for(var i =0;i< d.length;i++){
                                    polygonC.push({lat:parseFloat(d[i][0]),lng:parseFloat(d[i][1])})
                                }
                                polygons[data['slug']] = new google.maps.Polygon({
                                    paths: polygonC,
                                    strokeColor: color,
                                    strokeOpacity: 1,
                                    strokeWeight: 3,
                                    fillColor: color,
                                    fillOpacity: 0.35
                                });

                                polygons[data['slug']].setMap(map);

                                areaDeliveries[data['slug']]={
                                    'color' : color,
                                    'zone'  : zoneValue,
                                    'price' : price,
                                    'minPanier' : priceMin,
                                    'slotLength' : slotLength,
                                    'isOnline' : isOnline
                                }

                                $('#edit-zone').append('<option value="'+data['slug']+'">'+zoneValue+'</option>');
                                $('#editZone').show('slow');
                                $('#zone-color').minicolors('value',color);

                                sweetAlert('Bravo!', 'La zone a bien été crée', 'success');
                            });
                }else{
                    sweetAlert('Oops...', 'Veuillez remplir le formulaire', 'error');
                }
            });
            $('button.edit-submit').click(function(e){
                e.preventDefault();
                var price = $('#zone-price').val().replace(',','.'),
                        priceMin = $('#zone-price-min').val().replace(',','.');
                if( isNaN(price) || isNaN(priceMin) ){
                    sweetAlert('Oops...', 'Erreur format prix', 'error');
                }else if($('#zone-value').val()!='' && $('#zone-color').val() != '' ){
                    if($('#zone-price').val() == '')
                        price = "0";
                    if($('#zone-price-min').val() == '')
                        priceMin = "0";

                    var points = [],
                            slug = $('#edit-zone').find(':selected').val(),
                            vertices = polygons[slug].getPath(),
                            zoneValue = $('#zone-value').val(),
                            color = $('#zone-color').val(),
                            slotLength = $('#zone-slot-length').find(':selected').val(),
                            isOnline = $('#zone-online').is(':checked');

                    var centroid = [0.0,0.0];
                    for (var i =0; i < vertices.getLength(); i++) {
                        var xy = vertices.getAt(i);
                        points.push([xy.lat(),xy.lng()]);
                        centroid[0] += xy.lat();
                        centroid[1] += xy.lng();
                    }
                    centroid[0] = centroid[0] / vertices.getLength();
                    centroid[1] = centroid[1] / vertices.getLength();
                    $.ajax({
                                url: "{{ path('board_delivery_zones_edit', { context:context, contextPk: contextPk }) }}",
                                method: "post",
                                data: {
                                    "slug": slug,
                                    "zone-value" : zoneValue,
                                    "zone-color" : color,
                                    "zone-price" : parseFloat(price),
                                    "zone-price-min" : parseFloat(priceMin),
                                    "zone-slot-length" : slotLength,
                                    "is-online" : isOnline,
                                    "points": points,
                                    "centerLat": centroid[0],
                                    "centerLng": centroid[1]
                                },
                                beforeSend: function( xhr ) {

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.status);
                                    alert(thrownError);
                                }
                            })
                            .done(function( data ) {

                                var polygonC = [],d=data['points'];
                                for(var i =0;i< d.length;i++){
                                    polygonC.push({lat:parseFloat(d[i][0]),lng:parseFloat(d[i][1])})
                                }
                                polygons[slug].setPaths(polygonC);
                                polygons[slug].setOptions({fillColor: color, strokeColor: color});

                                areaDeliveries[slug]={
                                    'color' : color,
                                    'zone'  : zoneValue,
                                    'price' : price,
                                    'minPanier' : priceMin,
                                    'slotLength' : slotLength,
                                    'isOnline' : isOnline
                                }
                                $('#edit-zone').find(':selected').html(zoneValue);
                                sweetAlert('Bravo!', 'La zone a bien été éditée', 'success');
                            });
                }else{
                    sweetAlert('Oops...', 'Veuillez remplir le formulaire', 'error');
                }
            });
            {% else %}
            var markers = [];
            var polygons = [];
            var areaDeliveries = [];
            var polyCoords = [];
            var infowindow = [];
            var bounds = new google.maps.LatLngBounds();
            {% if areaDeliveries|length >0 %}
                {% for areaDelivery in areaDeliveries %}
                {% if loop.first %}
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: {lat: {{ areaDelivery.restaurant.address.latitude }}, lng: {{ areaDelivery.restaurant.address.longitude }} },
                    scrollwheel: true,
                    zoom: 14
                });
                {% endif %}
                markers["{{ areaDelivery.restaurant.slug }}"] = new google.maps.Marker({
                    map: map,
                    position: {lat: {{ areaDelivery.restaurant.address.latitude }}, lng: {{ areaDelivery.restaurant.address.longitude }} },
                    title: "{{ areaDelivery.restaurant.name }}"
                });





                areaDeliveries["{{ areaDelivery.restaurant.slug }}"] = [];

                areaDeliveries["{{ areaDelivery.restaurant.slug }}"]["{{ areaDelivery.slug }}"] = {
                    'color' : "{{ areaDelivery.color }}",
                    'zone'  : "{{ areaDelivery.zone }}",
                    'price' : {{ areaDelivery.price }},
                    'minPanier' : {{ areaDelivery.minPanier }},
                    'slotLength' : {{ areaDelivery.slotLength }},
                    'centerLat' : {{ areaDelivery.centerLat }},
                    'centerLng' : {{ areaDelivery.centerLng }},
                    'isOnline' : {% if areaDelivery.isOnline %}true{% else %}false{% endif %}
                };

                var polyCoords = [];
                {% for points in areaDelivery.points %}
                bounds.extend(new google.maps.LatLng({{ points[0] }} , {{ points[1] }} ));
                polyCoords.push({lat: {{ points[0] }} , lng: {{ points[1] }} });
                {% endfor %}
                if(!polygons["{{ areaDelivery.restaurant.slug }}"])
                    polygons["{{ areaDelivery.restaurant.slug }}"] = [];
                polygons["{{ areaDelivery.restaurant.slug }}"]["{{ areaDelivery.slug }}"] = new google.maps.Polygon({
                    paths: polyCoords,
                    strokeColor: "{{ areaDelivery.color }}",
                    strokeOpacity: 1.,
                    strokeWeight: 3,
                    fillColor: "{{ areaDelivery.color }}",
                    fillOpacity: 0.15
                });

                polygons["{{ areaDelivery.restaurant.slug }}"][ "{{ areaDelivery.slug }}" ].setMap(map);

                if(!infowindow["{{ areaDelivery.restaurant.slug }}"])
                    infowindow["{{ areaDelivery.restaurant.slug }}"] = [];
                infowindow["{{ areaDelivery.restaurant.slug }}"][ "{{ areaDelivery.slug }}"] = new google.maps.InfoWindow({
                    content: '<h4>Restaurant: {{ areaDelivery.restaurant.name }}</h4><br>'+
                    'nom de la zone: {{ areaDelivery.zone }}<br>'+
                    'coût de la livraison: {{ areaDelivery.price|number_format(2,'.',',') }} &euro;<br>'+
                    'prix minimum panier: {{ areaDelivery.minPanier|number_format(2,'.',',') }} &euro;<br>'+
                    'temps de livraison estimé: {{ areaDelivery.slotLength }} minutes<br><br>'+
                    '<a class="btn btn-success" href="{{ path('board_delivery_zones', { context:'restaurant', contextPk: areaDelivery.restaurant.slug }) }}" target="_blank">Editer</a>'
                });
                polygons["{{ areaDelivery.restaurant.slug }}"][ "{{ areaDelivery.slug }}"].addListener('click', function() {
                    for(var key in infowindow)
                        for(var key2 in infowindow[key])
                            infowindow[key][key2].close();

                    infowindow["{{ areaDelivery.restaurant.slug }}"][ "{{ areaDelivery.slug }}"].setPosition( new google.maps.LatLng({{ areaDelivery.centerLat }} , {{ areaDelivery.centerLng }} ));
                    infowindow["{{ areaDelivery.restaurant.slug }}"][ "{{ areaDelivery.slug }}"].open(map);
                });
                {% endfor %}
            map.fitBounds(bounds);
            {% else %}
                $('#map').html('<h2>Aucun de vos restaurants n\'a défini de zones de livraison pour le moment</h2><br><a href="{{ path('board_user_library',{context:context,contextPk:contextPk}) }}" class="btn btn-primary">Revenir en arrière</a>');
            {% endif %}
            console.log(areaDeliveries);
            {% endif %}
            $(window).keydown(function(event){
                if(event.keyCode == 13) {
                    event.preventDefault();
                    if($('button.submit').is(':visible'))
                        $('button.submit').click();
                    else
                        $('button.edit-submit').click()
                    return false;
                }
            });

        });

        $('.delete-zone').click(function(e){
            e.preventDefault();

            let slug = $('#edit-zone').find(':selected').val();

            let url = "{{ path('board_delivery_zones_delete', { context:context, contextPk: contextPk, slug: 'SLUG' }) }}";

            window.location.href = url.replace('SLUG',slug);
        })
    </script>
{% endblock %}